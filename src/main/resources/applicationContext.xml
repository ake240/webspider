<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:mongo="http://www.springframework.org/schema/data/mongo"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
    http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context-4.1.xsd
    http://www.springframework.org/schema/tx
    http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
    http://www.springframework.org/schema/aop   
    http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
    http://www.springframework.org/schema/data/mongo
    http://www.springframework.org/schema/data/mongo/spring-mongo.xsd 
    ">
    
    <!-- 
    <context:annotation-config />
     -->

	<context:property-placeholder location="classpath:jdbc-dev.properties"/>
	
	<context:component-scan base-package="com.datayes.webspider" />
	
	<!-- 
	<mongo:mongo id="mongo" replica-set="${mongo.url}" />
	<bean id="userCredentials" class="org.springframework.data.authentication.UserCredentials">
		<constructor-arg name="username" value="${mongo.username}" />
		<constructor-arg name="password" value="${mongo.password}" />
	</bean>
	<bean id="mongoTemplate" class="org.springframework.data.mongodb.core.MongoTemplate">
		<constructor-arg ref="mongo"/>
		<constructor-arg name="databaseName" value="${mongo.databaseName}"/>
		<constructor-arg ref="userCredentials"/>
	</bean>
	 -->
	
	<!-- 1.7版本+不支持mongo,支持mongo-client,options为client-options -->
    <!-- Usage of 'UserCredentials' with 'MongoClient' is no longer supported -->
    <!-- 配置mongodb连接池 ,创建mongoClient实例-->
    <!--credentials="mongodb://${mongo.user}:${mongo.pwd}@${mongo.host}:${mongo.port}/${mongo.defaultDbName}"为什么不起作用
  	  如果需要验证,mongo-client需要加这句: credentials="${mongo.user}:${mongo.pwd}@${mongo.defaultDbName}"-->
	<mongo:mongo-client id="mongoClient" host="${mongo.host}" port="${mongo.port}" credentials="${mongo.username}:${mongo.password}@${mongo.databasename}">
	    <mongo:client-options 
	        connections-per-host="${mongo.connectionsPerHost}"
	        threads-allowed-to-block-for-connection-multiplier="${mongo.threadsAllowedToBlockForConnectionMultiplier}"
	        connect-timeout="${mongo.connectTimeout}" 
	        max-wait-time="${mongo.maxWaitTime}"
	        socket-keep-alive="${mongo.socketKeepAlive}"
	        socket-timeout="${mongo.socketTimeout}"
	        />
	</mongo:mongo-client>
	
	<!-- 
	<bean id="userCredentials" class="org.springframework.data.authentication.UserCredentials">
		<constructor-arg name="username" value="${mongo.username}" />
		<constructor-arg name="password" value="${mongo.password}" />
	</bean>
	 
	<bean id="SPIDER_MONGO" class="org.springframework.data.mongodb.core.SimpleMongoDbFactory">	
		<constructor-arg name="mongo" ref="mongo"/>
		<constructor-arg name="databaseName" value="${mongo.databasename}" />
		<constructor-arg ref="userCredentials"/>
	</bean>
	
	<bean id="mongoTemplate" class="org.springframework.data.mongodb.core.MongoTemplate">
      <constructor-arg name="mongoDbFactory" ref="SPIDER_MONGO"/> 
    </bean>
	-->
	
	<mongo:db-factory id="mongoDbFactory"
                      dbname="${mongo.databasename}"
                      mongo-ref="mongoClient"/>
	
    <mongo:template id="mongoTemplate" db-factory-ref="mongoDbFactory" write-concern="NORMAL"/>
    
	
	<!-- 配置data source -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
		<property name="driverClass" value="${jdbc.driverClassName}" />
		<property name="jdbcUrl" value="${jdbc.url}" />
		<property name="user" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<property name="minPoolSize" value="5" />  
	    <property name="maxPoolSize" value="50" />  
	    <property name="maxIdleTime" value="1800" />
	    <property name="acquireIncrement" value="2" />  
	    <property name="maxStatements" value="0" />  
	    <property name="initialPoolSize" value="5" />  
	    <property name="idleConnectionTestPeriod" value="600" />  
	    <property name="acquireRetryAttempts" value="30" />
	    <property name="acquireRetryDelay" value="100" />
	    <property name="breakAfterAcquireFailure" value="false" />  
	    <property name="testConnectionOnCheckout" value="false" />
	</bean>
	
	<bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQL5Dialect</prop>
				<!-- <prop key="hibernate.hbm2ddl.auto">update</prop> -->
				<prop key="hibernate.bytecode.use_reflection_optimizer">false</prop>
				<prop key="hibernate.show_sql">true</prop>
				<prop key="format_sql">true</prop>
				<prop key="use_sql_comments">true</prop>
				<prop key="hibernate.connection.characterEncoding">UTF-8</prop>
            	<prop key="hibernate.connection.charSet">UTF-8</prop>
            	<!-- 开启查询缓存 -->
				<prop key="hibernate.cache.use_query_cache">true</prop>
				<!-- 开启二级缓存 -->
				<prop key="hibernate.cache.use_second_level_cache">true</prop>
				<!-- 高速缓存提供程序 --> 
				<!-- 由于spring也使用了Ehcache, 保证双方都使用同一个缓存管理器 -->
				<prop key="hibernate.cache.region.factory_class">org.hibernate.cache.ehcache.SingletonEhCacheRegionFactory</prop>
			</props>
		</property>
		<property name="packagesToScan">
            <list>
                <value>com.datayes.webspider.domain</value>
            </list>
        </property>
		<!--  
		<property name="annotatedClasses">
	    	<list>
	    		<value>com.datayes.webspider.domain.website.Category</value>
	    		<value>com.datayes.webspider.domain.website.WebSite</value>
	    		<value>com.datayes.webspider.domain.website.WebSiteCategoryRel</value>
	    		<value>com.datayes.webspider.domain.website.WebSiteConfig</value>
	    		<value>com.datayes.webspider.domain.website.WebSiteUser</value>
	    		<value>com.datayes.webspider.domain.website.WebSiteVerifyCode</value>
	    		<value>com.datayes.webspider.domain.website.ProxyIP</value>
	    		<value>com.datayes.webspider.domain.websiteOps.WebSiteOperation</value>
	    		<value>com.datayes.webspider.domain.websiteOps.WebSiteOperationParam</value>
	    		<value>com.datayes.webspider.domain.websiteOps.WebSiteOperationQueue</value>
	    		<value>com.datayes.webspider.domain.websiteOps.WebSiteOpsAntiRule</value>
	    		<value>com.datayes.webspider.domain.websiteOps.WebSiteOpsExceptionRule</value>
	    		<value>com.datayes.webspider.domain.websiteOps.WebSiteOpsRel</value>
	    		<value>com.datayes.webspider.domain.websiteOps.DataStoreType</value>
	    		<value>com.datayes.webspider.domain.websiteOps.DataStoreField</value>
	    		<value>com.datayes.webspider.domain.machine.Machine</value>
	    		<value>com.datayes.webspider.domain.machine.MachineRole</value>
	    		<value>com.datayes.webspider.domain.machine.MachineRoleRel</value>
	    		<value>com.datayes.webspider.domain.task.Task</value>
	    		<value>com.datayes.webspider.domain.user.User</value>
                <value>com.datayes.webspider.domain.words.IndexKeywords</value>
                <value>com.datayes.webspider.domain.words.IndexInfo</value>
                <value>com.datayes.webspider.domain.words.IndexTask</value>
				<value>com.datayes.webspider.domain.newsextractor.NewsExtractorFeedback</value>
	    	</list>
    	</property>
    	-->
	</bean>
	
	<!-- 对事务进行管理 -->
	<bean id="txManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
	
	<tx:annotation-driven transaction-manager="txManager" proxy-target-class="true" />
	
	<!-- 拦截器方式配置事物 -->  
	<!-- 
	<tx:advice id="transactionAdvice" transaction-manager="txManager">
		<tx:attributes>
			<tx:method name="add*" propagation="REQUIRED" rollback-for="Exception"/>
			<tx:method name="save*" propagation="REQUIRED" rollback-for="Exception"/>
			<tx:method name="insert*" propagation="REQUIRED" rollback-for="Exception"/>
			<tx:method name="update*" propagation="REQUIRED" rollback-for="Exception"/>
			<tx:method name="delete*" propagation="REQUIRED" rollback-for="Exception"/>
			<tx:method name="remove*" propagation="REQUIRED" rollback-for="Exception"/>
			<tx:method name="get*" propagation="NOT_SUPPORTED" read-only="true"/>
			<tx:method name="find*" propagation="NOT_SUPPORTED" read-only="true"/>
			<tx:method name="select*" propagation="NOT_SUPPORTED" read-only="true"/>
			<tx:method name="query*" propagation="NOT_SUPPORTED" read-only="true"/>
		</tx:attributes>
	</tx:advice>  
	 --> 
	
    <!-- Spring aop事务管理 --> 
    <!--  
    <aop:config>  
        <aop:pointcut id="transactionPointcut"  
            expression="execution(* org.datayes.webspider.service..*Impl.*(..))" />  
        <aop:advisor pointcut-ref="transactionPointcut"  
            advice-ref="transactionAdvice" />  
    </aop:config> 
     --> 
	
	<!-- 
	<bean id="persistenceExceptionTranslationPostProcessor"
        class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor"/>
         -->
    
</beans>
